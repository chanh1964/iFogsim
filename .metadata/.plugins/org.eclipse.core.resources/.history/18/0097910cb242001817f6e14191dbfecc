package org.fog.test.perfeval;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;

import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Log;
import org.cloudbus.cloudsim.Pe;
import org.cloudbus.cloudsim.Storage;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.power.PowerHost;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;
import org.cloudbus.cloudsim.sdn.overbooking.BwProvisionerOverbooking;
import org.cloudbus.cloudsim.sdn.overbooking.PeProvisionerOverbooking;
import org.fog.application.AppEdge;
import org.fog.application.AppLoop;
import org.fog.application.Application;
import org.fog.application.selectivity.FractionalSelectivity;
import org.fog.entities.Actuator;
import org.fog.entities.FogBroker;
import org.fog.entities.FogDevice;
import org.fog.entities.FogDeviceCharacteristics;
import org.fog.entities.Sensor;
import org.fog.entities.Tuple;
import org.fog.placement.Controller;
import org.fog.placement.ModuleMapping;
import org.fog.placement.ModulePlacementEdgewards;
import org.fog.placement.ModulePlacementMapping;
import org.fog.policy.AppModuleAllocationPolicy;
import org.fog.scheduler.StreamOperatorScheduler;
import org.fog.utils.FogLinearPowerModel;
import org.fog.utils.FogUtils;
import org.fog.utils.TimeKeeper;
import org.fog.utils.distribution.DeterministicDistribution;

/**
 * Simulation setup for case study 1 - EEG Beam Tractor Game
 * @author Harshit Gupta
 *
 */
public class DragonFly2 {
	static List<FogDevice> fogDevices = new ArrayList<FogDevice>();
	static List<Sensor> sensors = new ArrayList<Sensor>();
	static List<Actuator> actuators = new ArrayList<Actuator>();
	
	static boolean CLOUD = false ;
	
	static int numOfAreas = 2;
	static int numOfFogNodesPerArea = 3;
	static int numOfClientsPerFogNode = 1;
	//static double EEG_TRANSMISSION_TIME = 5.1;
	//static double EEG_TRANSMISSION_TIME = 10;
	
	public static void main(String[] args) {

		Log.printLine("Starting DragonFly Simulation...");

		try {
			Log.disable();
			int num_user = 1; // number of cloud users
			Calendar calendar = Calendar.getInstance();
			boolean trace_flag = false; // mean trace events

			CloudSim.init(num_user, calendar, trace_flag);

			String appId = "dragonfly"; // identifier of the application
			
			FogBroker broker = new FogBroker("broker");
			
			Application application = createApplication(appId, broker.getId());
			application.setUserId(broker.getId());
			
			createFogDevices(broker.getId(), appId);
			
			ModuleMapping moduleMapping = ModuleMapping.createModuleMapping(); // initializing a module mapping
			
			if(CLOUD){
				// if the mode of deployment is cloud-based
				/*moduleMapping.addModuleToDevice("connector", "cloud", numOfDepts*numOfMobilesPerDept); // fixing all instances of the Connector module to the Cloud
				moduleMapping.addModuleToDevice("concentration_calculator", "cloud", numOfDepts*numOfMobilesPerDept); // fixing all instances of the Concentration Calculator module to the Cloud
*/				moduleMapping.addModuleToDevice("central", "cloud"); // fixing all instances of the Connector module to the Cloud
				//moduleMapping.addModuleToDevice("concentration_calculator", "cloud"); // fixing all instances of the Concentration Calculator module to the Cloud
				moduleMapping.addModuleToDevice("fog_node", "cloud");
				moduleMapping.addModuleToDevice("area_fog_node", "cloud");
				for(FogDevice device : fogDevices){
					String name = device.getName();
					if(name.startsWith("F")){
						//moduleMapping.addModuleToDevice("client", device.getName(), 1);  // fixing all instances of the Client module to the Smartphones
						moduleMapping.addModuleToDevice("client", name);  // fixing all instances of the Client module to the Smartphones
					}
				}
			}else{
				// if the mode of deployment is cloud-based
				//moduleMapping.addModuleToDevice("connector", "cloud", numOfDepts*numOfMobilesPerDept); // fixing all instances of the Connector module to the Cloud
				moduleMapping.addModuleToDevice("central", "cloud"); // fixing all instances of the Connector module to the Cloud
				// rest of the modules will be placed by the Edge-ward placement policy
				for(FogDevice device : fogDevices){
					String name = device.getName();
					if(name.startsWith("F")){
						moduleMapping.addModuleToDevice("fog_node", name);	
						//moduleMapping.addModuleToDevice("client", name);
					}
					else if(name.startsWith("c-")){
						//moduleMapping.addModuleToDevice("client", name);
					}
					else if(name.startsWith("A")){
						moduleMapping.addModuleToDevice("area_fog_node", name);
					}
				}
			}
			
			
			Controller controller = new Controller("master-controller", fogDevices, sensors, 
					actuators);
			
			controller.submitApplication(application, 0, 
					(CLOUD)?(new ModulePlacementMapping(fogDevices, application, moduleMapping))
							:(new ModulePlacementEdgewards(fogDevices, sensors, actuators, application, moduleMapping)));

			TimeKeeper.getInstance().setSimulationStartTime(Calendar.getInstance().getTimeInMillis());

			CloudSim.startSimulation();

			CloudSim.stopSimulation();

			Log.printLine("VRGame finished!");
		} catch (Exception e) {
			e.printStackTrace();
			Log.printLine("Unwanted errors happen");
		}
	}

	/**
	 * Creates the fog devices in the physical topology of the simulation.
	 * @param userId
	 * @param appId
	 */
	private static void createFogDevices(int userId, String appId) {
		FogDevice cloud = createFogDevice("cloud", 684000, 128000, 10000, 10000, 0, 0.01, 16*103, 16*83.25); // creates the fog device Cloud at the apex of the hierarchy with level=0
		cloud.setParentId(-1);		
		
		fogDevices.add(cloud);
		
		for(int i=0;i<numOfAreas;i++){
			addArea(i+"", userId, appId, cloud.getId()); // adding a fog device for every Gateway in physical topology. The parent of each gateway is the Proxy Server
		}
		
	}

	private static FogDevice addArea(String id, int userId, String appId, int parentId){
		FogDevice area = createFogDevice("A-"+id, 2200*16, 1000*16, 10000, 10000, 1, 0.01, 5.8*16, 2.2*16);
		fogDevices.add(area);
		area.setParentId(parentId);
		area.setUplinkLatency(10); // latency of connection between gateways and proxy server is 4 ms
		for(int i=0;i<numOfFogNodesPerArea;i++){
			String fogNodeId = id+"-"+i;
			FogDevice fogNode = addFogNode(fogNodeId, userId, appId, area.getId()); // adding mobiles to the physical topology. Smartphones have been modeled as fog devices as well.
			//fogNode.setUplinkLatency(2); // latency of connection between the smartphone and proxy server is 4 ms
			fogDevices.add(fogNode);
		}
		return area;
	}
	
	private static FogDevice addFogNode(String id, int userId, String appId, int parentId){
		FogDevice fogNode = createFogDevice("F-"+id, 2200, 1000, 100, 100, 2, 0.01, 5.8, 2.2);
		fogNode.setParentId(parentId);
		fogNode.setUplinkLatency(2);
		//for(int i=0;i<numOfClientsPerFogNode;i++){
			//String clientId = id+"-"+i;
			addFogClient(id,userId,appId,fogNode.getId());
			//fogClient.setUplinkLatency(10);
			//fogDevices.add(fogClient);
		//}
		Actuator trafficLights = new Actuator("F-"+id+"-tf", userId, appId, "TRAFFIC_LIGHTS");
		actuators.add(trafficLights);
		trafficLights.setLatency(1.0);
		trafficLights.setGatewayDeviceId(fogNode.getId());
		return fogNode;
	}
	
	private static void addFogClient(String id, int userId, String appId, int parentId){
		//FogDevice fogClient = createFogDevice("c-"+id, 1, 500, 100, 100, 3, 0.01, 2, 2);
		//fogClient.setParentId(parentId);
		for(int i=0;i<numOfClientsPerFogNode;i++){
			Sensor gps = new Sensor("gps-"+id+"-"+i, "GPS", userId, appId, new DeterministicDistribution(5.1)); // inter-transmission time of EEG sensor follows a deterministic distribution;
			sensors.add(gps);
			gps.setGatewayDeviceId(parentId);
			gps.setLatency(1.0);
		}
		//Sensor gps = new Sensor("gps-"+id, "GPS", userId, appId, new DeterministicDistribution(5.1)); // inter-transmission time of EEG sensor follows a deterministic distribution;
		//sensors.add(gps);
		//gps.setGatewayDeviceId(fogClient.getId());
		//gps.setLatency(1.0);
		//return fogClient;
	}
	
	/**
	 * Creates a vanilla fog device
	 * @param nodeName name of the device to be used in simulation
	 * @param mips MIPS
	 * @param ram RAM
	 * @param upBw uplink bandwidth
	 * @param downBw downlink bandwidth
	 * @param level hierarchy level of the device
	 * @param ratePerMips cost rate per MIPS used
	 * @param busyPower
	 * @param idlePower
	 * @return
	 */
	private static FogDevice createFogDevice(String nodeName, long mips,
			int ram, long upBw, long downBw, int level, double ratePerMips, double busyPower, double idlePower) {
		
		List<Pe> peList = new ArrayList<Pe>();

		// 3. Create PEs and add these into a list.
		peList.add(new Pe(0, new PeProvisionerOverbooking(mips))); // need to store Pe id and MIPS Rating

		int hostId = FogUtils.generateEntityId();
		long storage = 1000000; // host storage
		int bw = 10000;

		PowerHost host = new PowerHost(
				hostId,
				new RamProvisionerSimple(ram),
				new BwProvisionerOverbooking(bw),
				storage,
				peList,
				new StreamOperatorScheduler(peList),
				new FogLinearPowerModel(busyPower, idlePower)
			);

		List<Host> hostList = new ArrayList<Host>();
		hostList.add(host);

		String arch = "x86"; // system architecture
		String os = "Linux"; // operating system
		String vmm = "Xen";
		double time_zone = 10.0; // time zone this resource located
		double cost = 3.0; // the cost of using processing in this resource
		double costPerMem = 0.05; // the cost of using memory in this resource
		double costPerStorage = 0.001; // the cost of using storage in this
										// resource
		double costPerBw = 0.0; // the cost of using bw in this resource
		LinkedList<Storage> storageList = new LinkedList<Storage>(); // we are not adding SAN
													// devices by now

		FogDeviceCharacteristics characteristics = new FogDeviceCharacteristics(
				arch, os, vmm, host, time_zone, cost, costPerMem,
				costPerStorage, costPerBw);

		FogDevice fogdevice = null;
		try {
			fogdevice = new FogDevice(nodeName, characteristics, 
					new AppModuleAllocationPolicy(hostList), storageList, 10, upBw, downBw, 0, ratePerMips);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		fogdevice.setLevel(level);
		return fogdevice;
	}

	/**
	 * Function to create the EEG Tractor Beam game application in the DDF model. 
	 * @param appId unique identifier of the application
	 * @param userId identifier of the user of the application
	 * @return
	 */
	@SuppressWarnings({"serial" })
	private static Application createApplication(String appId, int userId){
		
		Application application = Application.createApplication(appId, userId); // creates an empty application model (empty directed graph)
		
		/*
		 * Adding modules (vertices) to the application model (directed graph)
		 */
		//application.addAppModule("client", 10); // adding module Client to the application model
		//application.addAppModule("concentration_calculator", 10); // adding module Concentration Calculator to the application model
		application.addAppModule("central", 10); // adding module Connector to the application model
		application.addAppModule("fog_node", 10); // adding module Connector to the application model
		application.addAppModule("area_fog_node", 10); // adding module Connector to the application model
		
		/*
		 * Connecting the application modules (vertices) in the application model (directed graph) with edges
		 */
		application.addAppEdge("GPS", "fog_node", 2000, 1000, "CLIENT_GET_GPS", Tuple.UP, AppEdge.SENSOR);		
		//application.addAppEdge("client", "fog_node", 2000, 100, "CLIENT_REQUEST", Tuple.UP, AppEdge.MODULE);
		application.addAppEdge("fog_node","area_fog_node", 20, 1000, "FOG_TO_AREA", Tuple.UP, AppEdge.MODULE);
		//application.addAppEdge("area_fog_node","central", 20, 100, "AREA_TO_CLOUD", Tuple.UP, AppEdge.MODULE);
		//application.addAppEdge("central","area_fog_node", 20, 100, "CLOUD_TO_AREA", Tuple.DOWN, AppEdge.MODULE);
		application.addAppEdge("area_fog_node","fog_node", 20, 1000, "AREA_TO_FOG", Tuple.DOWN, AppEdge.MODULE);
		//application.addAppEdge("fog_node", "area_fog_node", 100, 1000, 30000, "FOG_TO_AREA", Tuple.UP, AppEdge.MODULE);
		//application.addAppEdge("fog_node", "fog_node", 100, 1000, "FOG_COMPUTE", Tuple.UP, AppEdge.MODULE);
		//application.addAppEdge("fog_node", "fog_node", 100, 10, "FOG_COMPUTE_DONE", Tuple.DOWN, AppEdge.MODULE);
		//application.addAppEdge("area_fog_node", "central", 100, 1000, 3600000, "AREA_TO_CLOUD", Tuple.UP, AppEdge.MODULE);
		//application.addAppEdge("area_fog_node", "fog_node", 100, 1000, "AREA_TO_FOG", Tuple.DOWN, AppEdge.MODULE);
		//application.addAppEdge("central" ,"area_fog_node", 100, 1000, "CLOUD_TO_AREA", Tuple.DOWN, AppEdge.MODULE);
		application.addAppEdge("fog_node", "TRAFFIC_LIGHTS", 20, 1000, "FOG_TO_TF", Tuple.DOWN, AppEdge.ACTUATOR);
		
		
		
				
		/*
		 * Defining the input-output relationships (represented by selectivity) of the application modules. 
		 */
		//application.addTupleMapping("client", "fog_node", "CLIENT_REQUEST", new FractionalSelectivity(0.9)); // 0.9 tuples of type _SENSOR are emitted by Client module per incoming tuple of type EEG 
		//application.addTupleMapping("client", "CONCENTRATION", "SELF_STATE_UPDATE", new FractionalSelectivity(1.0)); // 1.0 tuples of type SELF_STATE_UPDATE are emitted by Client module per incoming tuple of type CONCENTRATION 
		//application.addTupleMapping("concentration_calculator", "_SENSOR", "CONCENTRATION", new FractionalSelectivity(1.0)); // 1.0 tuples of type CONCENTRATION are emitted by Concentration Calculator module per incoming tuple of type _SENSOR 
		//application.addTupleMapping("client", "GLOBAL_GAME_STATE", "GLOBAL_STATE_UPDATE", new FractionalSelectivity(1.0)); // 1.0 tuples of type GLOBAL_STATE_UPDATE are emitted by Client module per incoming tuple of type GLOBAL_GAME_STATE 
		//application.addTupleMapping("client", "CLIENT_GET_GPS","CLIENT_REQUEST" , new FractionalSelectivity(1.0));
		application.addTupleMapping("fog_node","CLIENT_GET_GPS", "FOG_TO_AREA" , new FractionalSelectivity(0.9));
		application.addTupleMapping("area_fog_node","FOG_TO_AREA","AREA_TO_FOG" , new FractionalSelectivity(1.0));
		//application.addTupleMapping("area_fog_node","FOG_TO_AREA","AREA_TO_CLOUD" , new FractionalSelectivity(1.0));
		//application.addTupleMapping("central","AREA_TO_CLOUD","CLOUD_TO_AREA" , new FractionalSelectivity(1.0));
		//application.addTupleMapping("area_fog_node","CLOUD_TO_AREA","AREA_TO_FOG" , new FractionalSelectivity(1.0));
		application.addTupleMapping("fog_node","AREA_TO_FOG", "FOG_TO_TF", new FractionalSelectivity(1.0));
		//application.addTupleMapping("fog_node", "FOG_COMPUTE_DONE", "FOG_TO_TF", new FractionalSelectivity(1.0));
		//application.addTupleMapping("fog_node", "AREA_TO_FOG", "FOG_TO_TF", new FractionalSelectivity(1.0));
		//application.addTupleMapping("fog_node", "FOG_COMPUTE_DONE", "TRAFFIC_LIGHTS", new FractionalSelectivity(1.0));
		/*
		 * Defining application loops to monitor the latency of. 
		 * Here, we add only one loop for monitoring : EEG(sensor) -> Client -> Concentration Calculator -> Client -> DISPLAY (actuator)
		 */
		final AppLoop loop1 = new AppLoop(new ArrayList<String>(){{add("GPS");add("fog_node");add("area_fog_node");add("fog_node");add("TRAFFIC_LIGHTS");}});
		List<AppLoop> loops = new ArrayList<AppLoop>(){{add(loop1);}};
		application.setLoops(loops);
		
		return application;
	}
}